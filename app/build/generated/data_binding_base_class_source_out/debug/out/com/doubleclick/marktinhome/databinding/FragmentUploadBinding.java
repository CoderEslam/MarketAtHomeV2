// Generated by view binder compiler. Do not edit!
package com.doubleclick.marktinhome.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.HorizontalScrollView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RadioGroup;
import android.widget.RatingBar;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatSpinner;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.doubleclick.marktinhome.R;
import com.nex3z.togglebuttongroup.SingleSelectToggleGroup;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentUploadBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button Upload;

  @NonNull
  public final RadioGroup addToggleButton;

  @NonNull
  public final LinearLayout addToggleButtonColor;

  @NonNull
  public final ImageView addView;

  @NonNull
  public final ImageView addViewColor;

  @NonNull
  public final SingleSelectToggleGroup groupColor;

  @NonNull
  public final HorizontalScrollView horizontalScrollView;

  @NonNull
  public final HorizontalScrollView horizontalScrollView2;

  @NonNull
  public final EditText productLastPrice;

  @NonNull
  public final EditText productName;

  @NonNull
  public final EditText productPrice;

  @NonNull
  public final RatingBar ratingSeller;

  @NonNull
  public final AppCompatSpinner trademark;

  private FragmentUploadBinding(@NonNull ConstraintLayout rootView, @NonNull Button Upload,
      @NonNull RadioGroup addToggleButton, @NonNull LinearLayout addToggleButtonColor,
      @NonNull ImageView addView, @NonNull ImageView addViewColor,
      @NonNull SingleSelectToggleGroup groupColor,
      @NonNull HorizontalScrollView horizontalScrollView,
      @NonNull HorizontalScrollView horizontalScrollView2, @NonNull EditText productLastPrice,
      @NonNull EditText productName, @NonNull EditText productPrice,
      @NonNull RatingBar ratingSeller, @NonNull AppCompatSpinner trademark) {
    this.rootView = rootView;
    this.Upload = Upload;
    this.addToggleButton = addToggleButton;
    this.addToggleButtonColor = addToggleButtonColor;
    this.addView = addView;
    this.addViewColor = addViewColor;
    this.groupColor = groupColor;
    this.horizontalScrollView = horizontalScrollView;
    this.horizontalScrollView2 = horizontalScrollView2;
    this.productLastPrice = productLastPrice;
    this.productName = productName;
    this.productPrice = productPrice;
    this.ratingSeller = ratingSeller;
    this.trademark = trademark;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentUploadBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentUploadBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_upload, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentUploadBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.Upload;
      Button Upload = ViewBindings.findChildViewById(rootView, id);
      if (Upload == null) {
        break missingId;
      }

      id = R.id.addToggleButton;
      RadioGroup addToggleButton = ViewBindings.findChildViewById(rootView, id);
      if (addToggleButton == null) {
        break missingId;
      }

      id = R.id.addToggleButtonColor;
      LinearLayout addToggleButtonColor = ViewBindings.findChildViewById(rootView, id);
      if (addToggleButtonColor == null) {
        break missingId;
      }

      id = R.id.addView;
      ImageView addView = ViewBindings.findChildViewById(rootView, id);
      if (addView == null) {
        break missingId;
      }

      id = R.id.addViewColor;
      ImageView addViewColor = ViewBindings.findChildViewById(rootView, id);
      if (addViewColor == null) {
        break missingId;
      }

      id = R.id.groupColor;
      SingleSelectToggleGroup groupColor = ViewBindings.findChildViewById(rootView, id);
      if (groupColor == null) {
        break missingId;
      }

      id = R.id.horizontalScrollView;
      HorizontalScrollView horizontalScrollView = ViewBindings.findChildViewById(rootView, id);
      if (horizontalScrollView == null) {
        break missingId;
      }

      id = R.id.horizontalScrollView2;
      HorizontalScrollView horizontalScrollView2 = ViewBindings.findChildViewById(rootView, id);
      if (horizontalScrollView2 == null) {
        break missingId;
      }

      id = R.id.productLastPrice;
      EditText productLastPrice = ViewBindings.findChildViewById(rootView, id);
      if (productLastPrice == null) {
        break missingId;
      }

      id = R.id.productName;
      EditText productName = ViewBindings.findChildViewById(rootView, id);
      if (productName == null) {
        break missingId;
      }

      id = R.id.productPrice;
      EditText productPrice = ViewBindings.findChildViewById(rootView, id);
      if (productPrice == null) {
        break missingId;
      }

      id = R.id.ratingSeller;
      RatingBar ratingSeller = ViewBindings.findChildViewById(rootView, id);
      if (ratingSeller == null) {
        break missingId;
      }

      id = R.id.trademark;
      AppCompatSpinner trademark = ViewBindings.findChildViewById(rootView, id);
      if (trademark == null) {
        break missingId;
      }

      return new FragmentUploadBinding((ConstraintLayout) rootView, Upload, addToggleButton,
          addToggleButtonColor, addView, addViewColor, groupColor, horizontalScrollView,
          horizontalScrollView2, productLastPrice, productName, productPrice, ratingSeller,
          trademark);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
